import org.junit.Test;
import org.junit.After;
import java.lang.reflect.Field;
import org.junit.Assert;
import org.junit.Before;
import org.junit.rules.Timeout;

import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

import javax.swing.*;
import java.io.*;
import java.lang.reflect.*;
import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;
import java.lang.reflect.InvocationTargetException;
import java.util.UUID;

public class RunLocalTests {

    public static void main(String[] args) {
        Result result = JUnitCore.runClasses(RunLocalTests.class);
        for (Failure failure : result.getFailures()) {
            System.out.println(failure.toString());
        }
        System.out.println(result.wasSuccessful() ? "All tests passed." : "Some tests failed.");
    }

    @Test
    public void testUserEquals() {
        User user = new User("User1", "1234");
        Assert.assertTrue("The result should have been true but it was false",
                user.equals(new User("User1", "1234")));

        Assert.assertFalse("The result should have been false but it was true",
                user.equals(new User("User2", "1234")));
    }

    @Test
    public void testUserConstructor() {
        User user = new User("user1", "1234");
        Assert.assertEquals("user1", user.getUsername());
        Assert.assertTrue(user.getFriends().isEmpty());
        Assert.assertTrue(user.getBlocked().isEmpty());
        Assert.assertTrue(user.getPosts(). isEmpty());
    }

    @Test
    public void testAddAndRemoveFriend() {
        User user = new User("user1", "1234");
        User user2 = new User("user2", "1234");
        user.addFriend(user2);
        Assert.assertTrue(user.getFriends().contains(user2));
        user.removeFriend(user2);
        Assert.assertFalse(user.getFriends().contains(user2));
    }

    @Test
    public void testAddAndRemoveBlocked() {
        User user = new User("user1", "1234");
        User user2 = new User("user2", "1234");
        user.blockUser(user2);
        Assert.assertTrue(user.getBlocked().contains(user2));
        user.unblockUser(user2);
        Assert.assertFalse(user.getBlocked().contains(user2));
    }

    @Test
    public void testAddAndRemoveComment() {
        User user = new User("user1", "1234");
        Post post = new Post(user);
        Comments comment = new Comments("Hello", user);
        post.addComment(comment);
        Assert.assertTrue(post.getCommentList().contains(comment));
        post.removeComment(comment, user);
        Assert.assertFalse(post.getCommentList().contains(comment));
    }

    @Test
    public void testUserToString() {
        User user = new User("user1", "1234");
        Assert.assertEquals("Username: user1, Password: 1234, Followers: 0, Following: 0", user.toString());
    }

    //Tests if the hidePost() and unhidePost() methods work as expected
    @Test
    public void testHideAndUnhidePost() {
        User user1 = new User("user1", "1234");
        User user2 = new User("user2", "1234");
        Post post = new Post(new User("poster", "password"));
        post.hidePost(user1);
        post.hidePost(user2);

        // Test unhiding a post from a user in postFriends
        post.unHidePost(user1);
        Assert.assertFalse(post.getPostFriends().contains(user1));
        Assert.assertEquals(1, post.getPostFriends().size());

        // Test unhiding a post from a user not in postFriends
        post.unHidePost(user1);
        Assert.assertEquals(1, post.getPostFriends().size());

        // Test unhiding the last user
        post.unHidePost(user2);
        Assert.assertTrue(post.getPostFriends().isEmpty());

    }

    @Test
    public void testCommentsConstructor() {
        User user = new User("user1", "1234");
        Comments comment = new Comments("Hello", user);
        Assert.assertEquals("Hello", comment.getComment());
        Assert.assertTrue(user.equals(comment.getCommented()));
    }

    @Test
    public void testCommentUpvoteandDownvote() {
        User user = new User("user1", "1234");
        Comments comment = new Comments("Hello", user);
        for (int i = 0; i < 10; i++) {
            comment.upVoteComment();
        }
        Assert.assertTrue(comment.getUpVotes() == 10);
        for (int i = 0; i < 5; i++) {
            comment.downVoteComment();
        }
        Assert.assertTrue(comment.getDownVotes() == 5);
    }

    @Test
    public void testSocialMediaPlatformConstructor() {
        SocialMediaPlatform socialMediaPlatform = new SocialMediaPlatform();
        Assert.assertTrue(socialMediaPlatform.getImages().isEmpty());
        Assert.assertTrue(socialMediaPlatform.getUsers().isEmpty());
        Assert.assertTrue(socialMediaPlatform.getPlatformUsers().isEmpty());
        Assert.assertTrue(socialMediaPlatform.getImages().isEmpty());
    }

    @Test
    public void testMessagingConstructor() {
        User user1 = new User("user1", "1234");
        User user2 = new User("user2", "1234");
        Messaging messaging = new Messaging(user1, user2, "Hello");
        Assert.assertEquals(user1, messaging.getSender());
        Assert.assertEquals(user2, messaging.getReceiver());
        Assert.assertEquals("Hello", messaging.getMessageContent());
        Assert.assertTrue(messaging.getMessages().isEmpty());
    }

    @Test
    public void testSendMessageSuccess() throws InvalidException {
        // Setup: Add receiver to sender's friends
        User sender = new User("sender", "password1");
        User receiver = new User("receiver", "password2");
        Messaging message = new Messaging(sender, receiver, "Hello, receiver!");
        sender.addFriend(receiver);

        message.sendMessage();

        Assert.assertEquals(1, message.getMessages().size());
        Assert.assertEquals("Hello, receiver!", message.getMessages().get(0));
    }

    @Test
    public void testSendMessageToBlockedUser() {
        User sender = new User("sender", "password1");
        User receiver = new User("receiver", "password2");
        Messaging message = new Messaging(sender, receiver, "Hello, receiver!");
        // Setup: Sender blocks receiver
        sender.blockUser(receiver);

        InvalidException exception = Assert.assertThrows(InvalidException.class, message::sendMessage);

        Assert.assertEquals("Cannot send message, user is blocked", exception.getMessage());
        Assert.assertTrue(message.getMessages().isEmpty());
    }

    @Test
    public void testSendMessageToPrivateNonFriend() {
        User sender = new User("sender", "password1");
        User receiver = new User("receiver", "password2");
        Messaging message = new Messaging(sender, receiver, "Hello, receiver!");
        // Setup: Make receiver private
        receiver.setPriv(true);

        InvalidException exception = Assert.assertThrows(InvalidException.class, message::sendMessage);

        Assert.assertEquals("Cannot send message, user is private", exception.getMessage());
        Assert.assertTrue(message.getMessages().isEmpty());
    }

    @Test
    public void testSendMessageToPrivateFriend() throws InvalidException {
        User sender = new User("sender", "password1");
        User receiver = new User("receiver", "password2");
        Messaging message = new Messaging(sender, receiver, "Hello, receiver!");
        receiver.setPriv(true);
        sender.addFriend(receiver);

        message.sendMessage();

        Assert.assertEquals(1, message.getMessages().size());
        Assert.assertEquals("Hello, receiver!", message.getMessages().get(0));
    }

    @Test
    public void testDeleteExistingMessage() throws InvalidException {
        User user1 = new User("user1", "1234");
        User user2 = new User("user2", "1234");
        Messaging message = new Messaging(user1, user2, "");
        ArrayList<String> newMessages = message.getMessages();
        newMessages.add("Hello, World!");
        message.setMessages(newMessages);
        Assert.assertFalse(message.getMessages().contains("Hello, World!"));
    }

    @Test
    public void testDeleteNonExistingMessage() {
        User user1 = new User("user1", "1234");
        User user2 = new User("user2", "1234");
        Messaging message = new Messaging(user1, user2, "");
        ArrayList<String> newMessages = message.getMessages();
        newMessages.add("Hello, World!");
        message.setMessages(newMessages);
        InvalidException exception = Assert.assertThrows(InvalidException.class,
                () -> message.deleteMessage("This message doesn't exist"));
        Assert.assertEquals("Message not found!", exception.getMessage());
    }

    @Test
    public void testMessagesListAfterDeletion() throws InvalidException {
        User user1 = new User("user1", "1234");
        User user2 = new User("user2", "1234");
        Messaging message = new Messaging(user1, user2, "");
        ArrayList<String> newMessages = message.getMessages();
        newMessages.add("Hello, World!");
        message.setMessages(newMessages);
        int initialSize = message.getMessages().size();
        message.deleteMessage("Hello, World!");
        Assert.assertEquals(initialSize - 1, message.getMessages().size());
    }

    @Test
    public void testDeleteMultipleMessages() throws InvalidException {
        User user1 = new User("user1", "1234");
        User user2 = new User("user2", "1234");
        Messaging message = new Messaging(user1, user2, "");
        ArrayList<String> newMessages = message.getMessages();
        newMessages.add("Hello, World!");
        message.setMessages(newMessages);
        String secondMessage = "Second message";
        newMessages.add(secondMessage);
        message.setMessages(newMessages);

        message.deleteMessage("Hello, World!");
        message.deleteMessage(secondMessage);

        Assert.assertTrue(message.getMessages().isEmpty());
    }

}
